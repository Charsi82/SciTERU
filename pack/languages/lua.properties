# Define SciTE settings for Lua files.
import languages/lua.keywords
import languages/scite.constants
# import languages/lua.wow

file.patterns.lua=*.lua;*.wlua;*.macro;*.script
*source.patterns.lua=$(file.patterns.lua);

shbang.lua=lua

filter.lua=Lua (lua)|$(file.patterns.lua)|

*filter.lua=$(filter.lua)

lexer.$(file.patterns.lua)=lua

*language.lua=Lu&a|lua||

word.characters.$(file.patterns.lua)=$(chars.alpha)$(chars.numeric)$(chars.accented)_%

keywordclass.lua=and break do else elseif end false for function if \
in local nil not or repeat return then true until while
keywords.$(file.patterns.lua)=$(keywordclass.lua)

# Basic Functions (in both versions of Lua)
keywordclass2.lua=_VERSION assert collectgarbage dofile error gcinfo loadfile loadstring \
print rawget rawset require tonumber tostring type unpack rawlen warn

# Lua 4.0
# Basic Functions
keywordclass2.lua4=_ALERT _ERRORMESSAGE _INPUT _PROMPT _OUTPUT \
_STDERR _STDIN _STDOUT call dostring foreach foreachi getn globals newtype \
sort tinsert tremove

# String Manipulation & Mathematical Functions
keywordclass3.lua4=abs acos asin atan atan2 ceil cos deg exp \
floor format frexp ldexp log log10 max min mod rad random randomseed \
sin sqrt strbyte strchar strfind strlen strlower strrep strsub strupper tan

# Input and Output Facilities & System Facilities
keywordclass4.lua4=openfile closefile readfrom writeto appendto \
remove rename flush seek tmpfile tmpname read write close \
clock date difftime execute exit getenv setlocale time

# Lua 5.0
# Basic Functions
keywordclass2.lua5=_G getfenv getmetatable ipairs loadlib next pairs pcall \
rawequal setfenv setmetatable xpcall \
table math string io os package coroutine debug \
load module select
# I put the library names here, so when highlighted standalone, they are probably variable name from Lua 4.0 times.
# Last line -> Lua 5.1 functions

# String Manipulation, Table Manipulation, Mathematical Functions (string & table & math)
keywordclass3.lua5=string.byte string.char string.dump string.find string.len \
string.lower string.rep string.sub string.upper string.format string.gmatch \
string.match string.reverse string.gfind string.gsub \
string.to_utf8 string.from_utf8 string.utf8upper string.utf8lower string.utf8len \
string.packsize string.pack string.unpack string.reverse \
math.abs math.acos math.asin math.atan math.atan2 math.ceil math.cos math.deg math.exp \
math.floor math.frexp math.ldexp math.log math.log10 math.max math.min math.mod \
math.pi math.pow math.rad math.random math.randomseed math.sin math.sqrt math.tan \
math.cosh math.fmod math.modf math.sinh math.tanh math.huge \
math.maxinteger math.mininteger math.tointeger math.type math.ult \
:to_utf8 :from_utf8 :utf8upper :utf8lower :utf8len \
:byte :char :find :len :lower :rep :sub :upper :format :gfind :gmatch :gsub \
utf8.char utf8.charpattern utf8.codepoint utf8.codes utf8.len utf8.offset \
table.concat table.foreach table.foreachi table.getn table.sort table.insert \
table.remove table.setn table.move table.pack table.unpack table.maxn

# Last 3 lines -> Lua 5.1 functions

# Coroutine Manipulation, Input and Output Facilities, System Facilities (coroutine & io & os)
keywordclass4.lua5=coroutine.create coroutine.resume coroutine.status \
coroutine.wrap coroutine.yield coroutine.close coroutine.isyieldable coroutine.running \
io.close io.flush io.input io.lines io.open io.output io.read io.tmpfile io.type io.write \
io.stdin io.stdout io.stderr :close :flush :lines :read :seek :setvbuf :write \
os.clock os.date os.difftime os.execute os.exit os.getenv os.remove os.rename \
os.setlocale os.time os.tmpname \
package.cpath package.config package.searchers package.searchpath \
package.loaded package.loadlib package.path package.preload package.seeall \
io.popen lines debug.debug debug.getfenv debug.gethook debug.getinfo debug.getlocal \
debug.getmetatable debug.getregistry debug.getupvalue debug.setfenv \
debug.sethook debug.setlocal debug.setmetatable debug.setupvalue debug.traceback \
debug.getuservalue debug.setuservalue debug.upvalueid debug.upvaluejoin \
os.utf8remove os.utf8rename os.utf8execute

# Last 5 lines -> Lua 5.1 functions

# I keep keywords5, 6, 7 & 8 for other libraries
keyword.lua.extend.lib=shell.exec shell.msgbox shell.inputbox \
shell.getfileattr shell.setfileattr shell.findfiles shell.fileexists \
shell.to_utf8 shell.from_utf8 shell.getclipboardtext shell.calc_md5 shell.calc_sha256 \
gui.window gui.panel gui.set_panel gui.tabbar gui.list gui.memo gui.pass_focus \
gui.toolbar gui.open_dlg gui.save_dlg gui.select_dir_dlg gui.colour_dlg \
gui.files gui.chdir gui.message gui.prompt_value gui.run \
lfs.attributes lfs.chdir lfs.currentdir lfs.dir lfs.link lfs.lock lfs.mkdir \
lfs.rmdir lfs.symlinkattributes lfs.setmode lfs.touch lfs.unlock lfs.lock_dir

# To make the change from Lua 4 to Lua 5 as smooth as possible, I made these properties
# modular and flexible.
# If you use only Lua 4, you can remove the lua5 keywords.
# If you use only Lua 5, you can either remove the lua4 keywords, or put them
# in another property to highlight them in a warning/error style.
# If you still use both, you can keep them like below, or use separate styles.

keywords2.$(file.patterns.lua)=$(keywordclass2.lua) $(keywordclass2.lua4) $(keywordclass2.lua5)
keywords3.$(file.patterns.lua)=$(keywordclass3.lua4) $(keywordclass3.lua5)
keywords4.$(file.patterns.lua)=$(keywordclass4.lua4) $(keywordclass4.lua5)
keywords5.$(file.patterns.lua)=$(keyword.lua.scite.functions) $(keyword.lua.scite.properties)
keywords6.$(file.patterns.lua)=$(keyword.lua.scite.panes) $(keyword.scite.constants)
keywords7.$(file.patterns.lua)=$(keyword.lua.scite.miscellaneous) $(keyword.lua.extend.lib)
keywords8.$(file.patterns.lua)=$(keyword.lua.wow.constants) $(keyword.lua.wow.functions)

# statement.indent.$(file.patterns.lua)=5 do else function then
# statement.lookback.$(file.patterns.lua)=20
# indent.maintain.$(file.patterns.lua)=1

comment.block.lua=--
comment.block.at.line.start.lua=0

comment.stream.start.lua=--[[
comment.stream.end.lua=]]

# Lua styles

# Default
# style.lua.32=
# White space: Visible only in View Whitespace mode (or if it has a back colour)
style.lua.0=$(colour.whitespace)
# Block comment (Lua 5.0)
style.lua.1=$(colour.comment),$(font.comment)
# Line comment
style.lua.2=$(colour.comment),$(font.comment)
# Doc comment -- Not used in Lua (yet?)
style.lua.3=$(colour.code.comment.doc),$(font.comment)
# Number
style.lua.4=$(colour.number)
# Keyword
style.lua.5=$(colour.keyword),bold
# (Double quoted) String
style.lua.6=$(colour.string)
# Character (Single quoted string)
style.lua.7=$(colour.char)
# Literal string
style.lua.8=$(colour.string),$(font.comment),back:#E0FFFF
# Preprocessor (obsolete in Lua 4.0 and up)
style.lua.9=$(colour.preproc)
# Operators
style.lua.10=$(colour.operator)
# Identifier (everything else...)
style.lua.11=
# End of line where string is not closed
style.lua.12=back:#E0C0E0,eolfilled
# Keywords 2 (Basic functions)
style.lua.13=fore:#0080C0
# Keywords 3 (Strings, Tables, Math)
style.lua.14=fore:#8000FF
# Keywords 4 (Coroutine, IO, OS)
style.lua.15=fore:#FF8000
# Keywords 5 (SciTE Functions)
style.lua.16=fore:#9F0000
# Keywords 6 (SciTE Properties)
style.lua.17=fore:#999900
# Keywords 7 (Misc SciTE Functions/Properties)
style.lua.18=fore:#990099
# Keywords 8 (Lua Extension)
style.lua.19=fore:#00AAAA
# Labels
style.lua.20=fore:#7F7F00
# Braces are only matched in operator style
braces.lua.style=10

# =========================================================
# Команда меню - Выполнить (F5)
# Скрипт запускается с помошью внутреннего интерпретатора Lua и вывод направляется в встроенную консоль
# command.go.*.lua;*.macro;*.script=dofile $(FilePath)

command.go.$(file.patterns.lua)=run_script $(FilePath)
command.go.subsystem.*.lua;*.macro;*.script=3

# Команда меню - Собрать (F7)
# Скрипт выполняется внешним интерпретатором
# command.build.*.lua=utils\lua -e "io.stdout:setvbuf 'no'" "$(FilePath)" $(1) $(2) $(3) $(4)

command.build.$(file.patterns.lua)=utils\lua -e "io.stdout:setvbuf 'no'" "$(FilePath)" $(1) $(2) $(3) $(4)

command.build.*.wlua="$(FilePath)" $(1) $(2) $(3) $(4)
command.build.subsystem.*.wlua=2

command.name.4.$(file.patterns.lua)=Execute Selection
command.4.$(file.patterns.lua)=dostring $(CurrentSelection)
command.mode.4.$(file.patterns.lua)=subsystem:lua,savebefore:no

# command.help.$(file.patterns.lua)=$(CurrentSelection)!$(SciteDefaultHome)\help\lua-5.1rus.chm
command.help.$(file.patterns.lua)=$(SciteDefaultHome)\help\Lua_5.3_Руководство.html
command.help.subsystem.$(file.patterns.lua)=2

# Подключение файла сокращений
abbreviations.$(file.patterns.lua)=$(SciteDefaultHome)\abbrev\lua.abbrev

# Min длина введеной строки при которой будет автоматически открываться список с вариантами расшифровки аббревиатуры (abbrevlist.lua)
abbrev.lua.auto=2

# Подключение файла автодополнения и всплывающих подсказок по синтаксису
# api.$(file.patterns.lua)=$(SciteDefaultHome)\api\SciTELua.api;$(SciteDefaultHome)\api\LuaWoW.api
api.$(file.patterns.lua)=$(SciteDefaultHome)\api\SciTELua.api

# Символы, после ввода которых, возникает список автодополнения
autocomplete.lua.start.characters=.:

# Символы, после ввода которых возникает подсказка
calltip.lua.parameters.start=(
calltip.lua.parameters.end=)
# Символы - разделители параметров
calltip.lua.parameters.separators=,

# Символы, из которых строятся операторы языка (используется для всплывающей подсказки)
calltip.lua.word.characters=$(chars.alpha)$(chars.numeric)_

# Слова, которые не будут подсвечиваться скриптом highlighting_identical_text.lua
highlighting.identical.text.reserved.words.lua=and,break,do,else,elseif,end,false,for,function,if,in,local,nil,not,or,repeat,return,then,true,until,while

# Максимальное время работы скрипта в секундах
lua.runtime.quota=10